<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- network permission if your API calls need Internet --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; android:maxSdkVersion=&quot;32&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_MEDIA_IMAGES&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; android:maxSdkVersion=&quot;28&quot; /&gt;&#10;&#10;    &lt;!-- Declare camera feature as optional to resolve lint error --&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera.any&quot; android:required=&quot;false&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:icon=&quot;@drawable/ph906&quot;&#10;        android:roundIcon=&quot;@drawable/ph906&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.PH906_spalshscreen&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;!-- FileProvider for camera capture --&gt;&#10;        &lt;provider&#10;            android:name=&quot;androidx.core.content.FileProvider&quot;&#10;            android:authorities=&quot;${applicationId}.fileprovider&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:grantUriPermissions=&quot;true&quot;&gt;&#10;            &lt;meta-data&#10;                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;&#10;                android:resource=&quot;@xml/file_paths&quot; /&gt;&#10;        &lt;/provider&gt;&#10;&#10;        &lt;!-- Always land here first --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SplashActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- Login screen --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Main dashboard --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Terms &amp; Agreements: no history so user can’t back-nav here --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.TermsActivity&quot;&#10;            android:noHistory=&quot;true&quot;&#10;            android:excludeFromRecents=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Privacy Policy: same as Terms --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.PrivacyActivity&quot;&#10;            android:noHistory=&quot;true&quot;&#10;            android:excludeFromRecents=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Your existing ForgotPasswordActivity, etc. --&gt;&#10;        &lt;activity android:name=&quot;.ForgotPasswordActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.ChangePasswordActivity&quot; /&gt;&#10;&#10;        &lt;activity android:name=&quot;.ui.profile.EditProfileActivity&quot; android:exported=&quot;false&quot; /&gt;&#10;&#10;&#10;    &lt;/application&gt;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;!-- network permission if your API calls need Internet --&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; android:maxSdkVersion=&quot;32&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_MEDIA_IMAGES&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; android:maxSdkVersion=&quot;28&quot; /&gt;&#10;&#10;    &lt;!-- Declare camera feature as optional to resolve lint error --&gt;&#10;    &lt;uses-feature android:name=&quot;android.hardware.camera.any&quot; android:required=&quot;false&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:icon=&quot;@drawable/ph906&quot;&#10;        android:roundIcon=&quot;@drawable/ph906&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.PH906_spalshscreen&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;!-- FileProvider for camera capture --&gt;&#10;        &lt;provider&#10;            android:name=&quot;androidx.core.content.FileProvider&quot;&#10;            android:authorities=&quot;${applicationId}.fileprovider&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:grantUriPermissions=&quot;true&quot;&gt;&#10;            &lt;meta-data&#10;                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;&#10;                android:resource=&quot;@xml/file_paths&quot; /&gt;&#10;        &lt;/provider&gt;&#10;&#10;        &lt;!-- Always land here first --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SplashActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- Login screen --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Main dashboard --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Terms &amp; Agreements: no history so user can’t back-nav here --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.TermsActivity&quot;&#10;            android:noHistory=&quot;true&quot;&#10;            android:excludeFromRecents=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Privacy Policy: same as Terms --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.PrivacyActivity&quot;&#10;            android:noHistory=&quot;true&quot;&#10;            android:excludeFromRecents=&quot;true&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Your existing ForgotPasswordActivity, etc. --&gt;&#10;        &lt;activity android:name=&quot;.ForgotPasswordActivity&quot; /&gt;&#10;        &lt;activity android:name=&quot;.ChangePasswordActivity&quot; /&gt;&#10;&#10;        &lt;activity android:name=&quot;.ui.profile.EditProfileActivity&quot; android:exported=&quot;false&quot; /&gt;&#10;&#10;&#10;    &lt;/application&gt;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ph906_spalshscreen/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ph906_spalshscreen/MainActivity.java" />
              <option name="originalContent" value="package com.example.ph906_spalshscreen;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.MenuItem;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;import android.view.View;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.ActionBarDrawerToggle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.core.view.GravityCompat;&#10;import androidx.drawerlayout.widget.DrawerLayout;&#10;&#10;import com.example.ph906_spalshscreen.api.ApiClient;&#10;import com.example.ph906_spalshscreen.ui.about.AboutFragment;&#10;import com.example.ph906_spalshscreen.ui.letters.LettersFragment;&#10;import com.example.ph906_spalshscreen.ui.profile.ProfileFragment;&#10;import com.example.ph906_spalshscreen.ui.home.HomeFragment;&#10;import com.google.android.material.navigation.NavigationView;&#10;&#10;public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    private static final String TAG = &quot;MainActivity&quot;;&#10;&#10;    private DrawerLayout drawerLayout;&#10;    private NavigationView navigationView;&#10;    private Toolbar toolbar;&#10;    private ApiClient apiClient;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main); // make sure you have activity_main.xml&#10;&#10;        // Init ApiClient&#10;        apiClient = new ApiClient(this);&#10;&#10;        // Check login status&#10;        if (!apiClient.isLoggedIn()) {&#10;            startActivity(new Intent(this, LoginActivity.class));&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Setup Toolbar&#10;        toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        // Setup Drawer&#10;        drawerLayout = findViewById(R.id.drawer_layout);&#10;        navigationView = findViewById(R.id.nav_view);&#10;        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(&#10;                this, drawerLayout, toolbar,&#10;                R.string.navigation_drawer_open,&#10;                R.string.navigation_drawer_close&#10;        );&#10;        drawerLayout.addDrawerListener(toggle);&#10;        toggle.syncState();&#10;        navigationView.setNavigationItemSelectedListener(this);&#10;&#10;        // Update header with logged-in user info&#10;        updateNavigationHeader();&#10;&#10;        // --- HANDLE DASHBOARD BUTTONS ---&#10;        Button btnLetters = findViewById(R.id.btn_letters);&#10;        if (btnLetters != null) {&#10;            btnLetters.setOnClickListener(v -&gt; {&#10;                Log.d(TAG, &quot;Letters button clicked&quot;);&#10;                // Replace fragment instead of starting activity&#10;                getSupportFragmentManager()&#10;                        .beginTransaction()&#10;                        .replace(R.id.fragment_container, new LettersFragment())&#10;                        .addToBackStack(null)&#10;                        .commit();&#10;            });&#10;        }&#10;&#10;        // Ensure HomeFragment is loaded as the default fragment&#10;        if (savedInstanceState == null) {&#10;            getSupportFragmentManager()&#10;                .beginTransaction()&#10;                .replace(R.id.fragment_container, new HomeFragment())&#10;                .commit();&#10;        }&#10;    }&#10;&#10;    private void updateNavigationHeader() {&#10;        if (navigationView != null) {&#10;            View header = null;&#10;            try { header = navigationView.getHeaderView(0); } catch (Exception ignored) {}&#10;            if (header == null) {&#10;                try { header = navigationView.inflateHeaderView(R.layout.nav_header); } catch (Exception ignored) {}&#10;            }&#10;            if (header != null) {&#10;                TextView tvName = header.findViewById(R.id.nav_username);&#10;                TextView tvId = header.findViewById(R.id.nav_student_id);&#10;&#10;                String fullName = apiClient.getFullName();&#10;                String studentId = apiClient.getLoggedInStudentId();&#10;&#10;                if (tvName != null) tvName.setText(fullName != null ? fullName : &quot;Unknown User&quot;);&#10;                if (tvId != null) tvId.setText(studentId != null ? &quot;ID: &quot; + studentId : &quot;ID: N/A&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;        int id = item.getItemId();&#10;&#10;        if (id == R.id.nav_home) {&#10;            getSupportFragmentManager()&#10;                .beginTransaction()&#10;                .replace(R.id.fragment_container, new HomeFragment())&#10;                .commit();&#10;        } else if (id == R.id.nav_profile) {&#10;            getSupportFragmentManager()&#10;                .beginTransaction()&#10;                .replace(R.id.fragment_container, new ProfileFragment())&#10;                .addToBackStack(null)&#10;                .commit();&#10;        } else if (id == R.id.nav_change_password) {&#10;            startActivity(new Intent(this, ChangePasswordActivity.class));&#10;        } else if (id == R.id.nav_about) {&#10;            getSupportFragmentManager()&#10;                .beginTransaction()&#10;                .replace(R.id.fragment_container, new AboutFragment())&#10;                .addToBackStack(null)&#10;                .commit();&#10;        } else if (id == R.id.nav_logout) {&#10;            logoutUser();&#10;        }&#10;&#10;        drawerLayout.closeDrawer(GravityCompat.START);&#10;        return true;&#10;    }&#10;&#10;    private void logoutUser() {&#10;        apiClient.logout();&#10;        Intent intent = new Intent(MainActivity.this, LoginActivity.class);&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    @Override&#10;    public void onBackPressed() {&#10;        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {&#10;            drawerLayout.closeDrawer(GravityCompat.START);&#10;        } else {&#10;            super.onBackPressed();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        updateNavigationHeader();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.ph906_spalshscreen;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.util.Log;&#10;import android.view.MenuItem;&#10;import android.widget.Button;&#10;import android.widget.TextView;&#10;import android.view.View;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.ActionBarDrawerToggle;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.appcompat.widget.Toolbar;&#10;import androidx.core.view.GravityCompat;&#10;import androidx.drawerlayout.widget.DrawerLayout;&#10;&#10;import com.example.ph906_spalshscreen.api.ApiClient;&#10;import com.example.ph906_spalshscreen.ui.about.AboutFragment;&#10;import com.example.ph906_spalshscreen.ui.letters.LettersFragment;&#10;import com.example.ph906_spalshscreen.ui.profile.ProfileFragment;&#10;import com.example.ph906_spalshscreen.ui.home.HomeFragment;&#10;import com.google.android.material.navigation.NavigationView;&#10;&#10;public class MainActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    private static final String TAG = &quot;MainActivity&quot;;&#10;&#10;    private DrawerLayout drawerLayout;&#10;    private NavigationView navigationView;&#10;    private Toolbar toolbar;&#10;    private ApiClient apiClient;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_main); // make sure you have activity_main.xml&#10;&#10;        // Init ApiClient&#10;        apiClient = new ApiClient(this);&#10;&#10;        // Check login status&#10;        if (!apiClient.isLoggedIn()) {&#10;            startActivity(new Intent(this, LoginActivity.class));&#10;            finish();&#10;            return;&#10;        }&#10;&#10;        // Setup Toolbar&#10;        toolbar = findViewById(R.id.toolbar);&#10;        setSupportActionBar(toolbar);&#10;&#10;        // Setup Drawer&#10;        drawerLayout = findViewById(R.id.drawer_layout);&#10;        navigationView = findViewById(R.id.nav_view);&#10;        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(&#10;                this, drawerLayout, toolbar,&#10;                R.string.navigation_drawer_open,&#10;                R.string.navigation_drawer_close&#10;        );&#10;        drawerLayout.addDrawerListener(toggle);&#10;        toggle.syncState();&#10;        navigationView.setNavigationItemSelectedListener(this);&#10;&#10;        // Update header with logged-in user info&#10;        updateNavigationHeader();&#10;&#10;        // --- HANDLE DASHBOARD BUTTONS ---&#10;        Button btnLetters = findViewById(R.id.btn_letters);&#10;        if (btnLetters != null) {&#10;            btnLetters.setOnClickListener(v -&gt; {&#10;                Log.d(TAG, &quot;Letters button clicked&quot;);&#10;                // Replace fragment instead of starting activity&#10;                getSupportFragmentManager()&#10;                        .beginTransaction()&#10;                        .replace(R.id.fragment_container, new LettersFragment())&#10;                        .addToBackStack(null)&#10;                        .commit();&#10;            });&#10;        }&#10;&#10;        // Ensure HomeFragment is loaded as the default fragment&#10;        if (savedInstanceState == null) {&#10;            getSupportFragmentManager()&#10;                .beginTransaction()&#10;                .replace(R.id.fragment_container, new HomeFragment())&#10;                .commit();&#10;        }&#10;    }&#10;&#10;    private void updateNavigationHeader() {&#10;        if (navigationView != null) {&#10;            View header = null;&#10;            try { header = navigationView.getHeaderView(0); } catch (Exception ignored) {}&#10;            if (header == null) {&#10;                try { header = navigationView.inflateHeaderView(R.layout.nav_header); } catch (Exception ignored) {}&#10;            }&#10;            if (header != null) {&#10;                TextView tvName = header.findViewById(R.id.nav_username);&#10;                TextView tvId = header.findViewById(R.id.nav_student_id);&#10;&#10;                String fullName = apiClient.getFullName();&#10;                String studentId = apiClient.getLoggedInStudentId();&#10;&#10;                if (tvName != null) tvName.setText(fullName != null ? fullName : &quot;Unknown User&quot;);&#10;                if (tvId != null) tvId.setText(studentId != null ? &quot;ID: &quot; + studentId : &quot;ID: N/A&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean onNavigationItemSelected(@NonNull MenuItem item) {&#10;        int id = item.getItemId();&#10;&#10;        if (id == R.id.nav_home) {&#10;            getSupportFragmentManager()&#10;                .beginTransaction()&#10;                .replace(R.id.fragment_container, new HomeFragment())&#10;                .commit();&#10;        } else if (id == R.id.nav_profile) {&#10;            getSupportFragmentManager()&#10;                .beginTransaction()&#10;                .replace(R.id.fragment_container, new ProfileFragment())&#10;                .addToBackStack(null)&#10;                .commit();&#10;        } else if (id == R.id.nav_change_password) {&#10;            startActivity(new Intent(this, ChangePasswordActivity.class));&#10;        } else if (id == R.id.nav_about) {&#10;            getSupportFragmentManager()&#10;                .beginTransaction()&#10;                .replace(R.id.fragment_container, new AboutFragment())&#10;                .addToBackStack(null)&#10;                .commit();&#10;        } else if (id == R.id.nav_logout) {&#10;            logoutUser();&#10;        }&#10;&#10;        drawerLayout.closeDrawer(GravityCompat.START);&#10;        return true;&#10;    }&#10;&#10;    private void logoutUser() {&#10;        apiClient.logout();&#10;        Intent intent = new Intent(MainActivity.this, LoginActivity.class);&#10;        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);&#10;        startActivity(intent);&#10;        finish();&#10;    }&#10;&#10;    @Override&#10;    public void onBackPressed() {&#10;        if (drawerLayout.isDrawerOpen(GravityCompat.START)) {&#10;            drawerLayout.closeDrawer(GravityCompat.START);&#10;        } else {&#10;            super.onBackPressed();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        super.onResume();&#10;        updateNavigationHeader();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ph906_spalshscreen/PrivacyActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ph906_spalshscreen/PrivacyActivity.java" />
              <option name="originalContent" value="package com.example.ph906_spalshscreen;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.example.ph906_spalshscreen.ui.privacy.DataPrivacyAdultFragment;&#10;import com.example.ph906_spalshscreen.ui.privacy.DataPrivacyMinorFragment;&#10;&#10;public class PrivacyActivity extends AppCompatActivity {&#10;&#10;    private String version;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_privacy);&#10;&#10;        version = getIntent().getStringExtra(&quot;version&quot;);&#10;        if (version == null || version.trim().isEmpty()) version = &quot;minor&quot;;&#10;&#10;        Fragment fragment = &quot;minor&quot;.equals(version)&#10;                ? new DataPrivacyMinorFragment()&#10;                : new DataPrivacyAdultFragment();&#10;&#10;        getSupportFragmentManager().beginTransaction()&#10;                .replace(R.id.privacy_container, fragment)&#10;                .commit();&#10;    }&#10;&#10;    // Called by your fragment when user taps &quot;Agree&quot;&#10;    public void onAgreed() {&#10;        new PrefManager(this).acceptPrivacy(version, true);&#10;&#10;        startActivity(new Intent(this, MainActivity.class)&#10;                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK));&#10;        finish();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.ph906_spalshscreen;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.example.ph906_spalshscreen.ui.privacy.DataPrivacyAdultFragment;&#10;import com.example.ph906_spalshscreen.ui.privacy.DataPrivacyMinorFragment;&#10;&#10;public class PrivacyActivity extends AppCompatActivity {&#10;&#10;    private String version;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_privacy);&#10;&#10;        version = getIntent().getStringExtra(&quot;version&quot;);&#10;        if (version == null || version.trim().isEmpty()) version = &quot;minor&quot;;&#10;&#10;        Fragment fragment = &quot;minor&quot;.equals(version)&#10;                ? new DataPrivacyMinorFragment()&#10;                : new DataPrivacyAdultFragment();&#10;&#10;        getSupportFragmentManager().beginTransaction()&#10;                .replace(R.id.privacy_container, fragment)&#10;                .commit();&#10;    }&#10;&#10;    // Called by your fragment when user taps &quot;Agree&quot;&#10;    public void onAgreed() {&#10;        new PrefManager(this).acceptPrivacy(version, true);&#10;&#10;        startActivity(new Intent(this, MainActivity.class)&#10;                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK));&#10;        finish();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ph906_spalshscreen/ui/profile/ProfileFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ph906_spalshscreen/ui/profile/ProfileFragment.java" />
              <option name="originalContent" value="package com.example.ph906_spalshscreen.ui.profile;&#10;&#10;import android.app.Activity;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.bumptech.glide.load.engine.DiskCacheStrategy;&#10;import com.example.ph906_spalshscreen.PrefsHelper;&#10;import com.example.ph906_spalshscreen.R;&#10;import com.example.ph906_spalshscreen.api.ApiCallback;&#10;import com.example.ph906_spalshscreen.api.ApiClient;&#10;&#10;import org.json.JSONObject;&#10;&#10;public class ProfileFragment extends Fragment {&#10;&#10;    private TextView tvUserId, tvFirstName, tvLastName, tvBirthdate, tvNickname,&#10;            tvMobile, tvAddress, tvGuardian, tvGuardianMobile, tvBaptized, tvTeacher,&#10;            tvSex, tvCaseworker, tvAge;&#10;    private Button btnEdit;&#10;    private ImageView imgProfile;&#10;&#10;    private String ph906Raw;&#10;    private ApiClient apiClient;&#10;    private PrefsHelper prefs;&#10;&#10;    private final ActivityResultLauncher&lt;Intent&gt; editLauncher =&#10;            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -&gt; {&#10;                if (!isAdded()) return;&#10;                if (result.getResultCode() == Activity.RESULT_OK) {&#10;                    String savedUrl = prefs.getProfilePhotoUri();&#10;                    if (savedUrl != null &amp;&amp; !savedUrl.isEmpty()) {&#10;                        loadProfileImage(savedUrl, true); // cache-bust to show new image immediately&#10;                    }&#10;                    loadProfile(); // refresh profile fields too&#10;                }&#10;            });&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        View v = inflater.inflate(R.layout.fragment_profile, container, false);&#10;&#10;        imgProfile = v.findViewById(R.id.img_profile);&#10;        tvUserId = v.findViewById(R.id.tv_user_id);&#10;        tvFirstName = v.findViewById(R.id.tv_first_name);&#10;        tvLastName = v.findViewById(R.id.tv_last_name);&#10;        tvBirthdate = v.findViewById(R.id.tv_birthdate);&#10;        tvNickname = v.findViewById(R.id.tv_nickname);&#10;        tvMobile = v.findViewById(R.id.tv_mobile);&#10;        tvAddress = v.findViewById(R.id.tv_address);&#10;        tvGuardian = v.findViewById(R.id.tv_guardian);&#10;        tvGuardianMobile = v.findViewById(R.id.tv_guardian_mobile);&#10;        tvBaptized = v.findViewById(R.id.tv_baptized);&#10;        tvTeacher = v.findViewById(R.id.tv_teacher);&#10;        tvSex = v.findViewById(R.id.tv_sex);&#10;        tvCaseworker = v.findViewById(R.id.tv_caseworker);&#10;        tvAge = v.findViewById(R.id.tv_age);&#10;        btnEdit = v.findViewById(R.id.btn_edit);&#10;&#10;        apiClient = new ApiClient(requireContext());&#10;        prefs = new PrefsHelper(requireContext());&#10;&#10;        ph906Raw = prefs.getPh906();&#10;        set(tvUserId, formatPh906(ph906Raw));&#10;&#10;        String savedUrl = prefs.getProfilePhotoUri();&#10;        if (savedUrl != null &amp;&amp; !savedUrl.isEmpty()) {&#10;            loadProfileImage(savedUrl, false);&#10;        } else {&#10;            Glide.with(this).load(R.drawable.account_circle).into(imgProfile);&#10;        }&#10;&#10;        btnEdit.setOnClickListener(view -&gt; {&#10;            Intent intent = new Intent(getActivity(), EditProfileActivity.class);&#10;            intent.putExtra(&quot;ph906Id&quot;, ph906Raw);&#10;            editLauncher.launch(intent);&#10;        });&#10;&#10;        loadProfile();&#10;        return v;&#10;    }&#10;&#10;    private String formatPh906(String raw) {&#10;        if (raw == null || raw.isEmpty()) return &quot;PH906-&quot;;&#10;        String digits = raw.replaceAll(&quot;[^0-9]&quot;, &quot;&quot;);&#10;        if (digits.length() &gt;= 1) return &quot;PH906-&quot; + digits;&#10;        return raw.startsWith(&quot;PH906-&quot;) ? raw : (&quot;PH906-&quot; + raw);&#10;    }&#10;&#10;    private void loadProfile() {&#10;        apiClient.getMyProfile(new ApiCallback() {&#10;            @Override&#10;            public void onSuccess(JSONObject response) {&#10;                if (!isAdded()) return;&#10;                requireActivity().runOnUiThread(() -&gt; handleProfileResponse(response));&#10;            }&#10;            @Override&#10;            public void onError(String message) {&#10;                if (!isAdded()) return;&#10;                requireActivity().runOnUiThread(() -&gt;&#10;                        Toast.makeText(getContext(), &quot;Load failed: &quot; + message, Toast.LENGTH_LONG).show()&#10;                );&#10;            }&#10;        });&#10;    }&#10;&#10;    private void handleProfileResponse(JSONObject response) {&#10;        try {&#10;            JSONObject obj = response;&#10;            if (response.has(&quot;data&quot;) &amp;&amp; response.opt(&quot;data&quot;) instanceof JSONObject) {&#10;                obj = response.getJSONObject(&quot;data&quot;);&#10;            }&#10;            // ALWAYS coerce to String; never pass numbers directly to setText(int)&#10;            set(tvFirstName, obj.optString(&quot;first_name&quot;, &quot;&quot;));&#10;            set(tvLastName,  obj.optString(&quot;last_name&quot;, &quot;&quot;));&#10;            set(tvBirthdate, obj.optString(&quot;birthday&quot;, &quot;&quot;));&#10;            set(tvNickname,  obj.optString(&quot;nickname&quot;, &quot;&quot;));&#10;&#10;            String mobile = firstNonEmpty(obj.optString(&quot;mobile_number&quot;, &quot;&quot;), obj.optString(&quot;mobile&quot;, &quot;&quot;));&#10;            set(tvMobile, mobile);&#10;&#10;            set(tvAddress,  obj.optString(&quot;address&quot;, &quot;&quot;));&#10;            set(tvGuardian, obj.optString(&quot;guardian_name&quot;, &quot;&quot;));&#10;            set(tvGuardianMobile, obj.optString(&quot;guardian_mobile&quot;, &quot;&quot;));&#10;            set(tvBaptized, firstNonEmpty(obj.optString(&quot;water_baptized&quot;, &quot;&quot;), obj.optString(&quot;baptized&quot;, &quot;&quot;)));&#10;            set(tvTeacher,  obj.optString(&quot;teacher&quot;, &quot;&quot;));&#10;            set(tvSex,      obj.optString(&quot;sex&quot;, &quot;&quot;));&#10;            // age can be int or string; convert safely&#10;            String ageStr = obj.has(&quot;age&quot;) ? String.valueOf(obj.opt(&quot;age&quot;)) : &quot;&quot;;&#10;            set(tvAge, &quot;null&quot;.equalsIgnoreCase(ageStr) ? &quot;&quot; : ageStr);&#10;            set(tvCaseworker, obj.optString(&quot;caseworker_assigned&quot;, &quot;&quot;));&#10;&#10;            // If backend includes photo_url, prefer it and save&#10;            String apiPhotoUrl = obj.optString(&quot;photo_url&quot;, &quot;&quot;).trim();&#10;            if (!apiPhotoUrl.isEmpty()) {&#10;                prefs.saveProfilePhotoUri(apiPhotoUrl);&#10;                loadProfileImage(apiPhotoUrl, true); // cache-bust once&#10;            }&#10;        } catch (Exception e) {&#10;            Toast.makeText(getContext(), &quot;Parse error: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    private String firstNonEmpty(String a, String b) {&#10;        if (a != null &amp;&amp; !a.trim().isEmpty()) return a;&#10;        return (b == null) ? &quot;&quot; : b;&#10;    }&#10;&#10;    private void loadProfileImage(String url, boolean bustCache) {&#10;        if (!isAdded()) return;&#10;        String toLoad = url;&#10;        if (bustCache) {&#10;            String sep = url.contains(&quot;?&quot;) ? &quot;&amp;&quot; : &quot;?&quot;;&#10;            toLoad = url + sep + &quot;t=&quot; + System.currentTimeMillis();&#10;        }&#10;        // Clear any pending request to avoid flicker/race&#10;        try { Glide.with(this).clear(imgProfile); } catch (Exception ignored) {}&#10;&#10;        try {&#10;            Glide.with(this)&#10;                    .load(toLoad)&#10;                    .placeholder(R.drawable.account_circle)&#10;                    .error(R.drawable.account_circle)&#10;                    .centerCrop()&#10;                    .diskCacheStrategy(bustCache ? DiskCacheStrategy.NONE : DiskCacheStrategy.AUTOMATIC)&#10;                    .skipMemoryCache(bustCache)&#10;                    .into(imgProfile);&#10;        } catch (IllegalStateException ignored) {&#10;            // Fragment might be in transition; skip&#10;        }&#10;    }&#10;&#10;    // Safe setter: coerce any value to string and coalesce nulls to &quot;&quot;&#10;    private void set(TextView v, Object val) {&#10;        if (v == null) return;&#10;        String s;&#10;        if (val == null) {&#10;            s = &quot;&quot;;&#10;        } else {&#10;            s = String.valueOf(val);&#10;            if (&quot;null&quot;.equalsIgnoreCase(s)) s = &quot;&quot;;&#10;        }&#10;        v.setText(s);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ph906_spalshscreen.ui.profile;&#10;&#10;import android.app.Activity;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.Button;&#10;import android.widget.ImageView;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.bumptech.glide.load.engine.DiskCacheStrategy;&#10;import com.example.ph906_spalshscreen.PrefsHelper;&#10;import com.example.ph906_spalshscreen.R;&#10;import com.example.ph906_spalshscreen.api.ApiCallback;&#10;import com.example.ph906_spalshscreen.api.ApiClient;&#10;&#10;import org.json.JSONObject;&#10;&#10;public class ProfileFragment extends Fragment {&#10;&#10;    private TextView tvUserId, tvFirstName, tvLastName, tvBirthdate, tvNickname,&#10;            tvMobile, tvAddress, tvGuardian, tvGuardianMobile, tvBaptized, tvTeacher,&#10;            tvSex, tvCaseworker, tvAge;&#10;    private Button btnEdit;&#10;    private ImageView imgProfile;&#10;&#10;    private String ph906Raw;&#10;    private ApiClient apiClient;&#10;    private PrefsHelper prefs;&#10;&#10;    private final ActivityResultLauncher&lt;Intent&gt; editLauncher =&#10;            registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -&gt; {&#10;                if (!isAdded()) return;&#10;                if (result.getResultCode() == Activity.RESULT_OK) {&#10;                    String savedUrl = prefs.getProfilePhotoUri();&#10;                    if (savedUrl != null &amp;&amp; !savedUrl.isEmpty()) {&#10;                        loadProfileImage(savedUrl, true); // cache-bust to show new image immediately&#10;                    }&#10;                    loadProfile(); // refresh profile fields too&#10;                }&#10;            });&#10;&#10;    @Nullable&#10;    @Override&#10;    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,&#10;                             @Nullable Bundle savedInstanceState) {&#10;        View v = inflater.inflate(R.layout.fragment_profile, container, false);&#10;&#10;        imgProfile = v.findViewById(R.id.img_profile);&#10;        tvUserId = v.findViewById(R.id.tv_user_id);&#10;        tvFirstName = v.findViewById(R.id.tv_first_name);&#10;        tvLastName = v.findViewById(R.id.tv_last_name);&#10;        tvBirthdate = v.findViewById(R.id.tv_birthdate);&#10;        tvNickname = v.findViewById(R.id.tv_nickname);&#10;        tvMobile = v.findViewById(R.id.tv_mobile);&#10;        tvAddress = v.findViewById(R.id.tv_address);&#10;        tvGuardian = v.findViewById(R.id.tv_guardian);&#10;        tvGuardianMobile = v.findViewById(R.id.tv_guardian_mobile);&#10;        tvBaptized = v.findViewById(R.id.tv_baptized);&#10;        tvTeacher = v.findViewById(R.id.tv_teacher);&#10;        tvSex = v.findViewById(R.id.tv_sex);&#10;        tvCaseworker = v.findViewById(R.id.tv_caseworker);&#10;        tvAge = v.findViewById(R.id.tv_age);&#10;        btnEdit = v.findViewById(R.id.btn_edit);&#10;&#10;        apiClient = new ApiClient(requireContext());&#10;        prefs = new PrefsHelper(requireContext());&#10;&#10;        ph906Raw = prefs.getPh906();&#10;        set(tvUserId, formatPh906(ph906Raw));&#10;&#10;        String savedUrl = prefs.getProfilePhotoUri();&#10;        if (savedUrl != null &amp;&amp; !savedUrl.isEmpty()) {&#10;            loadProfileImage(savedUrl, false);&#10;        } else {&#10;            Glide.with(this).load(R.drawable.account_circle).into(imgProfile);&#10;        }&#10;&#10;        btnEdit.setOnClickListener(view -&gt; {&#10;            Intent intent = new Intent(getActivity(), EditProfileActivity.class);&#10;            intent.putExtra(&quot;ph906Id&quot;, ph906Raw);&#10;            editLauncher.launch(intent);&#10;        });&#10;&#10;        loadProfile();&#10;        return v;&#10;    }&#10;&#10;    private String formatPh906(String raw) {&#10;        if (raw == null || raw.isEmpty()) return &quot;PH906-&quot;;&#10;        String digits = raw.replaceAll(&quot;[^0-9]&quot;, &quot;&quot;);&#10;        if (digits.length() &gt;= 1) return &quot;PH906-&quot; + digits;&#10;        return raw.startsWith(&quot;PH906-&quot;) ? raw : (&quot;PH906-&quot; + raw);&#10;    }&#10;&#10;    private void loadProfile() {&#10;        apiClient.getMyProfile(new ApiCallback() {&#10;            @Override&#10;            public void onSuccess(JSONObject response) {&#10;                if (!isAdded()) return;&#10;                requireActivity().runOnUiThread(() -&gt; handleProfileResponse(response));&#10;            }&#10;            @Override&#10;            public void onError(String message) {&#10;                if (!isAdded()) return;&#10;                requireActivity().runOnUiThread(() -&gt;&#10;                        Toast.makeText(getContext(), &quot;Load failed: &quot; + message, Toast.LENGTH_LONG).show()&#10;                );&#10;            }&#10;        });&#10;    }&#10;&#10;    private void handleProfileResponse(JSONObject response) {&#10;        try {&#10;            JSONObject obj = response;&#10;            if (response.has(&quot;data&quot;) &amp;&amp; response.opt(&quot;data&quot;) instanceof JSONObject) {&#10;                obj = response.getJSONObject(&quot;data&quot;);&#10;            }&#10;            // ALWAYS coerce to String; never pass numbers directly to setText(int)&#10;            set(tvFirstName, obj.optString(&quot;first_name&quot;, &quot;&quot;));&#10;            set(tvLastName,  obj.optString(&quot;last_name&quot;, &quot;&quot;));&#10;            set(tvBirthdate, obj.optString(&quot;birthday&quot;, &quot;&quot;));&#10;            set(tvNickname,  obj.optString(&quot;nickname&quot;, &quot;&quot;));&#10;&#10;            String mobile = firstNonEmpty(obj.optString(&quot;mobile_number&quot;, &quot;&quot;), obj.optString(&quot;mobile&quot;, &quot;&quot;));&#10;            set(tvMobile, mobile);&#10;&#10;            set(tvAddress,  obj.optString(&quot;address&quot;, &quot;&quot;));&#10;            set(tvGuardian, obj.optString(&quot;guardian_name&quot;, &quot;&quot;));&#10;            set(tvGuardianMobile, obj.optString(&quot;guardian_mobile&quot;, &quot;&quot;));&#10;            set(tvBaptized, firstNonEmpty(obj.optString(&quot;water_baptized&quot;, &quot;&quot;), obj.optString(&quot;baptized&quot;, &quot;&quot;)));&#10;            set(tvTeacher,  obj.optString(&quot;teacher&quot;, &quot;&quot;));&#10;            set(tvSex,      obj.optString(&quot;sex&quot;, &quot;&quot;));&#10;            // age can be int or string; convert safely&#10;            String ageStr = obj.has(&quot;age&quot;) ? String.valueOf(obj.opt(&quot;age&quot;)) : &quot;&quot;;&#10;            set(tvAge, &quot;null&quot;.equalsIgnoreCase(ageStr) ? &quot;&quot; : ageStr);&#10;            set(tvCaseworker, obj.optString(&quot;caseworker_assigned&quot;, &quot;&quot;));&#10;&#10;            // If backend includes photo_url, prefer it and save&#10;            String apiPhotoUrl = obj.optString(&quot;photo_url&quot;, &quot;&quot;).trim();&#10;            if (!apiPhotoUrl.isEmpty()) {&#10;                prefs.saveProfilePhotoUri(apiPhotoUrl);&#10;                loadProfileImage(apiPhotoUrl, true); // cache-bust once&#10;            }&#10;        } catch (Exception e) {&#10;            Toast.makeText(getContext(), &quot;Parse error: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    private String firstNonEmpty(String a, String b) {&#10;        if (a != null &amp;&amp; !a.trim().isEmpty()) return a;&#10;        return (b == null) ? &quot;&quot; : b;&#10;    }&#10;&#10;    private void loadProfileImage(String url, boolean bustCache) {&#10;        if (!isAdded()) return;&#10;        String toLoad = url;&#10;        if (bustCache) {&#10;            String sep = url.contains(&quot;?&quot;) ? &quot;&amp;&quot; : &quot;?&quot;;&#10;            toLoad = url + sep + &quot;t=&quot; + System.currentTimeMillis();&#10;        }&#10;        // Clear any pending request to avoid flicker/race&#10;        try { Glide.with(this).clear(imgProfile); } catch (Exception ignored) {}&#10;&#10;        try {&#10;            Glide.with(this)&#10;                    .load(toLoad)&#10;                    .placeholder(R.drawable.account_circle)&#10;                    .error(R.drawable.account_circle)&#10;                    .centerCrop()&#10;                    .diskCacheStrategy(bustCache ? DiskCacheStrategy.NONE : DiskCacheStrategy.AUTOMATIC)&#10;                    .skipMemoryCache(bustCache)&#10;                    .into(imgProfile);&#10;        } catch (IllegalStateException ignored) {&#10;            // Fragment might be in transition; skip&#10;        }&#10;    }&#10;&#10;    // Safe setter: coerce any value to string and coalesce nulls to &quot;&quot;&#10;    private void set(TextView v, Object val) {&#10;        if (v == null) return;&#10;        String s;&#10;        if (val == null) {&#10;            s = &quot;&quot;;&#10;        } else {&#10;            s = String.valueOf(val);&#10;            if (&quot;null&quot;.equalsIgnoreCase(s)) s = &quot;&quot;;&#10;        }&#10;        v.setText(s);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_letters.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_letters.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@drawable/gradient_bg&quot;&#10;    tools:context=&quot;.ui.letters.LettersFragment&quot;&gt;&#10;&#10;    &lt;!-- Search Bar + Filter --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layout_search&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:background=&quot;@drawable/btn_gradient&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/etSearch&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:hint=&quot;Search by ID or name&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textColorHint=&quot;#AAAAAA&quot;&#10;            android:paddingStart=&quot;12dp&quot;&#10;            android:paddingEnd=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnFilter&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:text=&quot;⚙&quot;&#10;            android:backgroundTint=&quot;@color/colorAccent&quot;&#10;            android:textColor=&quot;@android:color/white&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Filter Buttons --&gt;&#10;    &lt;HorizontalScrollView&#10;        android:id=&quot;@+id/filter_scroll&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:scrollbars=&quot;none&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/layout_search&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnAll&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;ALL&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                app:strokeColor=&quot;@android:color/white&quot;&#10;                app:strokeWidth=&quot;2dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnPending&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;PENDING&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                app:strokeColor=&quot;@android:color/white&quot;&#10;                app:strokeWidth=&quot;2dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnOnHand&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;ON HAND&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                app:strokeColor=&quot;@android:color/white&quot;&#10;                app:strokeWidth=&quot;2dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnTurnedIn&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;TURNED IN&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                app:strokeColor=&quot;@android:color/white&quot;&#10;                app:strokeWidth=&quot;2dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnTurnInLate&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;TURN IN LATE&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                app:strokeColor=&quot;@android:color/white&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/HorizontalScrollView&gt;&#10;&#10;    &lt;!-- RecyclerView --&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerViewLetters&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/filter_scroll&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@drawable/gradient_bg&quot;&#10;    tools:context=&quot;.ui.letters.LettersFragment&quot;&gt;&#10;&#10;    &lt;!-- Search Bar + Filter --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layout_search&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:background=&quot;@drawable/btn_gradient&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/etSearch&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:hint=&quot;Search by ID or name&quot;&#10;            android:background=&quot;@android:color/transparent&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textColorHint=&quot;#AAAAAA&quot;&#10;            android:paddingStart=&quot;12dp&quot;&#10;            android:paddingEnd=&quot;12dp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnFilter&quot;&#10;            android:layout_width=&quot;48dp&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:text=&quot;⚙&quot;&#10;            android:backgroundTint=&quot;@color/colorAccent&quot;&#10;            android:textColor=&quot;@android:color/white&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- Filter Buttons --&gt;&#10;    &lt;HorizontalScrollView&#10;        android:id=&quot;@+id/filter_scroll&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:scrollbars=&quot;none&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/layout_search&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:padding=&quot;8dp&quot;&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnAll&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;ALL&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                app:strokeColor=&quot;@android:color/white&quot;&#10;                app:strokeWidth=&quot;2dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnPending&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;PENDING&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                app:strokeColor=&quot;@android:color/white&quot;&#10;                app:strokeWidth=&quot;2dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnOnHand&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;ON HAND&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                app:strokeColor=&quot;@android:color/white&quot;&#10;                app:strokeWidth=&quot;2dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnTurnedIn&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;TURNED IN&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                app:strokeColor=&quot;@android:color/white&quot;&#10;                app:strokeWidth=&quot;2dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/btnTurnInLate&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;TURN IN LATE&quot;&#10;                android:textColor=&quot;@android:color/white&quot;&#10;                app:strokeColor=&quot;@android:color/white&quot;&#10;                app:strokeWidth=&quot;2dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/HorizontalScrollView&gt;&#10;&#10;    &lt;!-- RecyclerView --&gt;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/recyclerViewLetters&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/filter_scroll&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string name=&quot;dashboard&quot;&gt;DASHBOARD&lt;/string&gt;&#10;    &lt;string name=&quot;letters&quot;&gt;LETTERS&lt;/string&gt;&#10;    &lt;string name=&quot;username&quot;&gt;Rodney&lt;/string&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Hello, PH0906!&lt;/string&gt;&#10;    &lt;string name=&quot;back_button_desc&quot;&gt;Back&lt;/string&gt;&#10;    &lt;string name=&quot;menu_button_desc&quot;&gt;Menu&lt;/string&gt;&#10;    &lt;string name=&quot;profile_picture_desc&quot;&gt;Profile picture&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close navigation drawer&lt;/string&gt;&#10;    &lt;!-- Terms &amp; Service --&gt;&#10;    &lt;string name=&quot;terms_adult&quot;&gt;Full Terms &amp;amp; Service for adults…&lt;/string&gt;&#10;    &lt;string name=&quot;terms_minor&quot;&gt;Simplified Terms for minors…&lt;/string&gt;&#10;    &lt;!-- Privacy Policy --&gt;&#10;    &lt;string name=&quot;privacy_adult&quot;&gt;Privacy Policy (Adult) …&lt;/string&gt;&#10;    &lt;string name=&quot;privacy_minor&quot;&gt;Privacy Policy (Minor) …&lt;/string&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string name=&quot;dashboard&quot;&gt;DASHBOARD&lt;/string&gt;&#10;    &lt;string name=&quot;letters&quot;&gt;LETTERS&lt;/string&gt;&#10;    &lt;string name=&quot;username&quot;&gt;Rodney&lt;/string&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;Hello, PH0906!&lt;/string&gt;&#10;    &lt;string name=&quot;back_button_desc&quot;&gt;Back&lt;/string&gt;&#10;    &lt;string name=&quot;menu_button_desc&quot;&gt;Menu&lt;/string&gt;&#10;    &lt;string name=&quot;profile_picture_desc&quot;&gt;Profile picture&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_open&quot;&gt;Open navigation drawer&lt;/string&gt;&#10;    &lt;string name=&quot;navigation_drawer_close&quot;&gt;Close navigation drawer&lt;/string&gt;&#10;    &lt;!-- Terms &amp; Service --&gt;&#10;    &lt;string name=&quot;terms_adult&quot;&gt;Full Terms &amp;amp; Service for adults…&lt;/string&gt;&#10;    &lt;string name=&quot;terms_minor&quot;&gt;Simplified Terms for minors…&lt;/string&gt;&#10;    &lt;!-- Privacy Policy --&gt;&#10;    &lt;string name=&quot;privacy_adult&quot;&gt;Privacy Policy (Adult) …&lt;/string&gt;&#10;    &lt;string name=&quot;privacy_minor&quot;&gt;Privacy Policy (Minor) …&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>